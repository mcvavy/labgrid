trilium:
  controllers:
    main:
      # -- enable the controller.
      enabled: true

      # -- Set the controller type.
      # Valid options are deployment, daemonset, statefulset, cronjob or job
      type: deployment
      # -- Set annotations on the deployment/statefulset/daemonset/cronjob/job
      annotations: {}
      # -- Set labels on the deployment/statefulset/daemonset/cronjob/job
      labels: {}
      # -- Number of desired pods. When using a HorizontalPodAutoscaler, set this to `null`.
      replicas: 1
      # -- Set the controller upgrade strategy
      # For Deployments, valid values are Recreate (default) and RollingUpdate.
      # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
      # DaemonSets/CronJobs/Jobs ignore this.
      strategy:

      rollingUpdate:
        # -- Set deployment RollingUpdate max unavailable
        unavailable:
        # -- Set deployment RollingUpdate max surge
        surge:
        # -- Set statefulset RollingUpdate partition
        partition:
      # -- ReplicaSet revision history limit
      revisionHistoryLimit: 3

      # Controller-specific overrides for `defaultPodOptions` keys
      pod: {}

      containers:
        main:
          # -- Override the container name
          nameOverride:

          # -- Specify if this container depends on any other containers
          # This is used to determine the order in which the containers are rendered.
          dependsOn: []

          image:
            # -- image repository
            repository: triliumnext/notes
            # -- image tag
            tag: v0.91.6
            # -- image pull policy
            pullPolicy: IfNotPresent

          # -- Probe configuration
          # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
          probes:
            # -- Liveness probe configuration
            # @default -- See below
            liveness:
              # -- Enable the liveness probe
              enabled: true
              # -- Set this to `true` if you wish to specify your own livenessProbe
              custom: false
              # -- sets the probe type when not using a custom probe
              # @default -- "TCP"
              type: TCP
              # -- The spec field contains the values for the default livenessProbe.
              # If you selected `custom: true`, this field holds the definition of the livenessProbe.
              # @default -- See below
              spec:
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3

            # -- Readiness probe configuration
            readiness:
              # -- Enable the readiness probe
              enabled: true
              # -- Set this to `true` if you wish to specify your own readinessProbe
              custom: false
              # -- sets the probe type when not using a custom probe
              # @default -- "TCP"
              type: TCP
              # -- The spec field contains the values for the default readinessProbe.
              # If you selected `custom: true`, this field holds the definition of the readinessProbe.
              # @default -- See below
              spec:
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3

            # -- Startup probe configuration
            startup:
              # -- Enable the startup probe
              enabled: true
              # -- Set this to `true` if you wish to specify your own startupProbe
              custom: false
              # -- sets the probe type when not using a custom probe
              # @default -- "TCP"
              type: TCP
              # -- The spec field contains the values for the default startupProbe.
              # If you selected `custom: true`, this field holds the definition of the startupProbe.
              # @default -- See below
              spec:
                initialDelaySeconds: 0
                timeoutSeconds: 1
                ## This means it has a maximum of 5*30=150 seconds to start up before it fails
                periodSeconds: 5
                failureThreshold: 30

  # -- Configure the services for the chart here.
  # Additional services can be added by adding a dictionary key similar to the 'main' service.
  # @default -- See below
  service:
    main:
      # -- Enables or disables the service
      enabled: true

      # -- Override the name suffix that is used for this service
      nameOverride: ""

      # -- Configure which controller this service should target
      controller: main

      # -- Make this the primary service for this controller (used in probes, notes, etc...).
      # If there is more than 1 service targeting the controller, make sure that only 1 service is
      # marked as primary.
      primary: true

      # -- Set the service type
      type: ClusterIP

      # # -- Configure the Service port information here.
      # # Additional ports can be added by adding a dictionary key similar to the 'http' service.
      # # @default -- See below
      # ports:
      #   http:
      #     # -- Enables or disables the port
      #     enabled: true

      #     # -- Make this the primary port (used in probes, notes, etc...)
      #     # If there is more than 1 service, make sure that only 1 port is marked as primary.
      #     primary: true

      #     # -- The port number
      #     port:

      #     # -- Port protocol.
      #     # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
      #     # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
      #     protocol: HTTP

      #     # -- Specify a service targetPort if you wish to differ the service port from the application port.
      #     # If `targetPort` is specified, this port number is used in the container definition instead of
      #     # the `port` value. Therefore named ports are not supported for this field.
      #     targetPort:

      #     # -- Specify the nodePort value for the LoadBalancer and NodePort service types.
      #     # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
      #     nodePort:

      #     # -- Specify the appProtocol value for the Service.
      #     # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
      #     appProtocol:

  # -- Configure the ingresses for the chart here.
  ingress:
    main:
      enabled: true
      nameOverride:
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-staging"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"

      ## Configure the hosts for the ingress
      hosts:
        - # -- Host address. Helm template can be passed.
          host: notes-stg.labgrid.net
          ## Configure the paths for the host
          paths:
            - # -- Path.  Helm template can be passed.
              path: /
              pathType: Prefix
              service:
                # -- Overrides the service name reference for this path
                # The service name to reference.
                name: main
                # -- Reference a service identifier from this values.yaml
                identifier: main
                port: http

      # -- Configure TLS for the ingress. Both secretName and hosts can process a Helm template.
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  configini:
    general:
      instanceName: "primary-notes"
      # Disable authentication to Trilium? (if you're running it on a private network, or have authentication handled by another component)
      noAuthentication: false
      # Disable backups of the database?
      noBackup: false
    network:
      host: "0.0.0.0"
      port: 8080
      https: false
      certPath: ""
      keyPath: ""
      trustedReverseProxy: true
  
  persistence:
    data:
      # -- Enables or disables the persistence item. Defaults to true
      enabled: false

      # -- Sets the persistence type
      # Valid options are persistentVolumeClaim, emptyDir, nfs, hostPath, secret, configMap or custom
      type: persistentVolumeClaim

      # -- Storage Class for the data volume.
      # If set to `-`, dynamic provisioning is disabled.
      # If set to something else, the given storageClass is used.
      # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.

      # storageClass: "synology-iscsi-delete"
      storageClass: # "-"
      existingClaim: trillium-pvc

      accessMode: ReadWriteOnce

      # -- The amount of storage that is requested for the persistent volume.
      size: 2Gi

      # -- Set to true to retain the PVC upon `helm uninstall`
      retain: false