replicaCount: 2

n8nEnvironment:
- name: N8N_ENCRYPTION_KEY
  valueFrom:
    secretKeyRef:
      name: "azure-credential"
      key: N8N_ENCRYPTION_KEY
- name: DB_TYPE
  value: "postgresdb"
- name: N8N_PORT
  value: http
- name: DB_POSTGRESDB_HOST
  valueFrom:
    secretKeyRef:
      name: n8n-pgcluster-app
      key: host
- name: DB_POSTGRESDB_PORT
  valueFrom:
    secretKeyRef:
      name: n8n-pgcluster-app
      key: port
- name: DB_POSTGRESDB_DATABASE
  valueFrom:
    secretKeyRef:
      name: n8n-pgcluster-app
      key: dbname
- name: DB_POSTGRESDB_USER
  valueFrom:
    secretKeyRef:
      name: n8n-pgcluster-app
      key: username
- name: DB_POSTGRESDB_PASSWORD
  valueFrom:
    secretKeyRef:
      name: n8n-pgcluster-app
      key: password

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: n8n.labgrid.net
      paths:
        - path: /
          pathType: ImplementationSpecific


# Additional volumes on the output Deployment definition.
volumes:
- name: n8n-data
  persistentVolumeClaim:
    claimName: n8n-storage

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: n8n-data
  mountPath: "/home/node/.n8n"

nodeSelector: {}

tolerations: []

affinity: {}


persistentVolumeClaim:
  create: true
  accessMode: ReadWriteOnce
  volumeMode: Filesystem
  size: 1Gi
  storageClassName: "synology-nfs-delete"
  existingPersistentVolumeClaim: ''
  annotations: {}
  # -- Additional labels for the persistent volume claim object.
  labels: {}

databaseCredential:
  secretName: n8n-pgcluster-app

initContainers:
  - name: fix-permissions
    image: busybox
    command: 
      - sh
      - -c
      - chown -R 1000:1000 /home/node/.n8n && chmod -R 0775 /home/node/.n8n
    volumeMounts:
      - name: n8n-data
        mountPath: /home/node/.n8n
    securityContext:
      runAsUser: 0
      runAsGroup: 0
  - name: wait-for-postgres-cluster
    image: postgres:latest
    command:
      - sh
      - -c
      - |
        until pg_isready -h "$N8N_PGCLUSTER_RW_SERVICE_HOST" -p 5432; do 
          echo Waiting for the database to be ready...; 
          sleep 5; 
        done;
    securityContext:
      runAsUser: 0
      runAsGroup: 0

pgcluster:
  enabled: true
  type: postgresql

  version:
    # -- PostgreSQL major version to use
    postgresql: "17"

  mode: standalone

  cluster:
    instances: 1
    imageName: "ghcr.io/cloudnative-pg/postgresql:17.2"
    imagePullPolicy: IfNotPresent

    storage:
      size: 8Gi
      storageClass: "synology-iscsi-delete"

    resources:
      requests:
        memory: "512Mi"
        cpu: "1"
      limits:
        memory: "1Gi"
        cpu: "2"

    priorityClassName: ""
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"

    affinity:
      enablePodAntiAffinity: true
      topologyKey: topology.kubernetes.io/zone

    enableSuperuserAccess: true

    enablePDB: true

    initdb:
      database: "n8n"
      owner: "labgridappuser"


  backups:
    enabled: true
    # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
    destinationPath: "https://labgrid.blob.core.windows.net/n8n-pg-backup"
    # -- One of `s3`, `azure` or `google`
    provider: azure
    azure:
      path: "/"
      connectionString: ""
      storageAccount: ""
      storageKey: ""
      storageSasToken: ""
      containerName: ""
      serviceName: blob
      inheritFromAzureAD: false
    secret:
      create: false
      name: "azure-credential"

    wal:
      # -- WAL compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
      compression: gzip
      # -- Whether to instruct the storage provider to encrypt WAL files. One of `` (use the storage container default), `AES256` or `aws:kms`.
      encryption: AES256
      # -- Number of WAL files to be archived or restored in parallel.
      maxParallel: 1
    data:
      # -- Data compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
      compression: gzip
      # -- Whether to instruct the storage provider to encrypt data files. One of `` (use the storage container default), `AES256` or `aws:kms`.
      encryption: AES256
      # -- Number of data files to be archived or restored in parallel.
      jobs: 2

    scheduledBackups:
      -
        # -- Scheduled backup name
        name: scheduled-backup
        # -- Schedule in cron format
        schedule: "0 0 0 * * *"
        # schedule: "0 0 0 * * 1,4,7"
        # -- Backup owner reference
        backupOwnerReference: self
        # -- Backup method, can be `barmanObjectStore` (default) or `volumeSnapshot`
        method: barmanObjectStore

    # -- Retention policy for backups
    retentionPolicy: "14d"

  externalSecretBackupCredentials:
    enabled: true
    name: azure-credential
    refreshInterval: "1h"
    secretStoreRef:
      name: azure-kv-cluster-store
      kind: ClusterSecretStore
    data:
      - secretKey: AZURE_STORAGE_ACCOUNT
        remoteRef:
          key: labgrid-storage-account-name
      - secretKey: AZURE_STORAGE_SAS_TOKEN
        remoteRef:
          key: n8n-pg-backup-sas-token
      - secretKey: N8N_ENCRYPTION_KEY
        remoteRef:
          key: n8n-encryption-key
