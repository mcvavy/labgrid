keycloak:
  global:
    defaultStorageClass: "synology-iscsi-delete"
  replicaCount: 2
  image:
    debug: false
  production: true
  externalDatabase:
    existingSecret: "iam-pgcluster-app"

  initContainers:
    - name: wait-for-postgres-cluster
      image: postgres:latest
      command:
        - sh
        - -c
        - |
          until pg_isready -h "$IAM_PGCLUSTER_RW_SERVICE_HOST" -p 5432; do 
            echo Waiting for the database to be ready...; 
            sleep 5; 
          done;


pgcluster:
  enabled: true
  type: postgresql

  version:
    # -- PostgreSQL major version to use
    postgresql: "17"

  mode: standalone

  cluster:
    instances: 2
    imageName: "ghcr.io/cloudnative-pg/postgresql:17.2"
    imagePullPolicy: IfNotPresent

    storage:
      size: 8Gi
      storageClass: "synology-iscsi-delete"

    resources:
      requests:
        memory: "512Mi"
        cpu: "1"
      limits:
        memory: "1Gi"
        cpu: "2"

    priorityClassName: ""
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"

    affinity:
      enablePodAntiAffinity: true
      topologyKey: topology.kubernetes.io/zone

    enableSuperuserAccess: true
    superuserSecret: "postgres-superuser-external-secret"

    enablePDB: true

    initdb:
      database: "appdb"
      owner: "labgridappuser"
      secret:
        name: "iam-postgres-app-user"


  backups:
    enabled: true
    # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
    destinationPath: "https://labgrid.blob.core.windows.net/labgrid-pg-backup"
    # -- One of `s3`, `azure` or `google`
    provider: azure
    azure:
      path: "/"
      connectionString: ""
      storageAccount: ""
      storageKey: ""
      storageSasToken: ""
      containerName: ""
      serviceName: blob
      inheritFromAzureAD: false
    secret:
      create: false
      name: "azure-credential"

    wal:
      # -- WAL compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
      compression: gzip
      # -- Whether to instruct the storage provider to encrypt WAL files. One of `` (use the storage container default), `AES256` or `aws:kms`.
      encryption: AES256
      # -- Number of WAL files to be archived or restored in parallel.
      maxParallel: 1
    data:
      # -- Data compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
      compression: gzip
      # -- Whether to instruct the storage provider to encrypt data files. One of `` (use the storage container default), `AES256` or `aws:kms`.
      encryption: AES256
      # -- Number of data files to be archived or restored in parallel.
      jobs: 2

    scheduledBackups:
      -
        # -- Scheduled backup name
        name: scheduled-backup
        # -- Schedule in cron format
        schedule: "0 0 0 * * *"
        # schedule: "0 0 0 * * 1,4,7"
        # -- Backup owner reference
        backupOwnerReference: self
        # -- Backup method, can be `barmanObjectStore` (default) or `volumeSnapshot`
        method: barmanObjectStore

    # -- Retention policy for backups
    retentionPolicy: "14d"

  externalSecretBackupCredentials:
    name: azure-credential
    refreshInterval: "1h"
    secretStoreRef:
      name: azure-kv-cluster-store
      kind: ClusterSecretStore
    data:
      - secretKey: AZURE_STORAGE_ACCOUNT
        remoteRef:
          key: labgrid-storage-account-name
      - secretKey: labgrid-storage-account-name
        remoteRef:
          key: labgrid-storage-account-name
      - secretKey: labgrid-blob-sas-token
        remoteRef:
          key: labgrid-blob-sas-token
      - secretKey: AZURE_STORAGE_SAS_TOKEN
        remoteRef:
          key: postgres-backup-sas-token

  externalSecretPostgresAppUser:
    name: iam-postgres-app-user
    refreshInterval: "1h"
    secretStoreRef:
      name: azure-kv-cluster-store
      kind: ClusterSecretStore
    target:
      template:
        type: kubernetes.io/basic-auth
    data:
      - secretKey: username
        remoteRef:
          key: iam-postgres-username
      - secretKey: password
        remoteRef:
          key: iam-postgres-password